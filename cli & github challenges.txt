- COMMAND LINE CHALLENGE
    - using only the command line...
    - create a new folder and move into it
    >> mkdir [foldername] && cd [foldername]
    - create 3 new files
    >> touch [filename1] [filename2] [filename3]
    - redirect your name into the first file
    >> echo "Yoojin Ko" > firstfile
    - append your age to the first file without using an editor (use redirection... but be careful not to overwrite it)
    >> echo 20 >> firstfile
    - look up the command for how to count the number of words in a file and check that it works
    >> wc -w firstfile
    - now look up how to use the same command to count the number of letters in the file
    >> wc -m firstfile
    - create an alias for this command (more challenging)
    >> alias cnt="wc -m"
    - look up how to create a variable in the terminal and save your name in a variable called "name"
    >> name="Yoojin Ko"
    - edit your .bashrc file so that whenever you open a new terminal it says "hello <your name>" (you might need to edit a different file if you aren't using a bash shell, such as zsh, or are on windows) (you might want to delete this later)
    >> vim ~/.bashrc
    >> add commands below;
    name="Yoojin Ko"
    echo "Hello $name"

- GITHUB CHALLENGE
    - create a new github repo on github and clone it
    >> git clone https://github.com/thisisyoojin/course_challenges.git
    >> cd course_challenges
    - make a new branch
    >> git checkout -b main
    - make a change
    >> echo "The course challenges" > README.md
    - add it to staging
    >> git add .
    - commit it
    >> git commit -m "Initialises github repo"
    - push this branch to the remote
    >> git push origin main
    - make a pull request and merge it
    (Added the change by adding file)
    >> git checkout -b 1stweek
    >> touch 1stweek_challenges.txt
    
    - now create a new repo locally
    >> git init
    - create a change
    >> touch newfile.txt
    - make a commit
    >> git commit -m "Initialises local repo"
    - make a new change
    >> amended the file
    - add it to staging
    >> git add .
    - oh no that was actually a mistake! I didnt mean to stage it
    - use git reset to reset the staging area
    >> git reset
    - make a new branch called Cozy_Branch
    >> git branch -m main
    >> git checkout -b Cozy_Branch
    - make a file called test.txt and put something on the first line
    >> touch test.txt
    - switch back to master (dont merge the changes)
    >> git checkout main
    - make a new branch called Sweet_Branch
    >> git checkout -b Sweet_Branch
    - make ANOTHER file called test.txt (we're trying to cause a merge conflict)
    >> touch test.txt
    - commit the change to this branch
    - now merge Cozy_Branch into Sweet_Branch (which branch does that you need to run the command from?)
    >> Need to stay in Sweet_Branch
    >> git merge Cozy_Branch
    - you should get a merge conflict in that file where incompatible changes have been made
    - fix the conflict by editing the file
    - commit the fix
    >> git commit -m "Solved Conflict"
    - merge the changes into master
    >> git checkout main
    >> git merge Sweet_Branch
    - using only the command line...
    - create a new folder and move into it
    >> mkdir [foldername] && cd [foldername]
    - create 3 new files
    >> touch [filename1] [filename2] [filename3]
    - redirect your name into the first file
    >> echo "Yoojin Ko" > firstfile
    - append your age to the first file without using an editor (use redirection... but be careful not to overwrite it)
    >> echo 20 >> firstfile
    - look up the command for how to count the number of words in a file and check that it works
    >> wc -w firstfile
    - now look up how to use the same command to count the number of letters in the file
    >> wc -m firstfile
    - create an alias for this command (more challenging)
    >> alias cnt="wc -m"
    - look up how to create a variable in the terminal and save your name in a variable called "name"
    >> name="Yoojin Ko"
    - edit your .bashrc file so that whenever you open a new terminal it says "hello <your name>" (you might need to edit a different file if you aren't using a bash shell, such as zsh, or are on windows) (you might want to delete this later)
    >> vim ~/.bashrc
    >> add commands below;
    name="Yoojin Ko"
    echo "Hello $name"

- GITHUB CHALLENGE
    - create a new github repo on github and clone it
    >> git clone https://github.com/thisisyoojin/course_challenges.git
    >> cd course_challenges
    - make a new branch
    >> git checkout -b main
    - make a change
    >> echo "The course challenges" > README.md
    - add it to staging
    >> git add .
    - commit it
    >> git commit -m "Initialises github repo"
    - push this branch to the remote
    >> git push origin main
    - make a pull request and merge it
    (Added the change by adding file)
    >> git checkout -b 1stweek
    >> touch 1stweek_challenges.txt
    
    - now create a new repo locally
    >> git init
    - create a change
    >> touch newfile.txt
    - make a commit
    >> git commit -m "Initialises local repo"
    - make a new change
    >> amended the file
    - add it to staging
    >> git add .
    - oh no that was actually a mistake! I didnt mean to stage it
    - use git reset to reset the staging area
    >> git reset
    - make a new branch called Cozy_Branch
    >> git branch -m main
    >> git checkout -b Cozy_Branch
    - make a file called test.txt and put something on the first line
    >> touch test.txt
    - switch back to master (dont merge the changes)
    >> git checkout main
    - make a new branch called Sweet_Branch
    >> git checkout -b Sweet_Branch
    - make ANOTHER file called test.txt (we're trying to cause a merge conflict)
    >> touch test.txt
    - commit the change to this branch
    - now merge Cozy_Branch into Sweet_Branch (which branch does that you need to run the command from?)
    >> Need to stay in Sweet_Branch
    >> git merge Cozy_Branch
    - you should get a merge conflict in that file where incompatible changes have been made
    - fix the conflict by editing the file
    - commit the fix
    >> git commit -m "Solved Conflict"
    - merge the changes into master
    >> git checkout main
    >> git merge Sweet_Branch
